import { Injectable, OnInit } from '@angular/core';
import { BehaviorSubject, map } from 'rxjs';
import { HttpClient, HttpParams } from '@angular/common/http';
import { IProduct } from '../shared/Models/Products';
import { Guid } from 'guid-typescript';
import { IAddBasket, IAddBasketItem, IError, IReturnedBasket, IReturnedBasketItem } from '../shared/Models/basket';
import { environment } from '../../baseUrl';

@Injectable({
  providedIn: 'root'
})
export class BasketService {
  /**
   *
   */
  callMe=true;
 
  error: string | null = null;

// ููุนุช ุนุงุงุงุด 

//ูููู ุตุญ ุจูุณุจุฉ โ 100% ๐ฏ
// ูุงู ุฌุฏุง ุฌุฏุง ุฌุฏุง [Very Gold Gold Gold]
//ูู ุงู  ูุฑูุงุจูู ุงูุณ ุจุชุจุต ุนูู ุฑูุฑูุณ xxx ูุงู ุงู ูุฑูุงุจูู ูุงู ุจุชุจุต ุนูู ุงูุฑูุฑูุณ ุงููู ุจุชุจุต ุนููู ุงู ุงูุณ ุงููู ูู xxx
//ู ูู ุงูุฑูุฑูุณ xxx ูุญุชูู ุนูู ูุฑูุงุจูู ุจูุจุต ุนูู ุฑูุฑูุณ yyy ูุงูุง ุบูุฑุช ุงู ุฑูุฑูุณ yyy ู zzz
//ู ุจุงูุชุงูู ูู ุฌูุช ุงุฌูุจ ูููุฉ ุงู ูุฑูุงุจูู ุงููู ูุงู ุจูุดุงูุฑ ุนูู yyy ูุจูู ุจูุดุงูุฑ ุนูู ุงู zzz ูู ุทุฑูู ุงู ูุฑูุงุจูู y ุงููู ูู ุจูุจุต ุนูู ุฑูุฑูุณ xxx ุงููู ุจูู ูุญุชูู ุนูู ูุฑูุงุจูู ุจูุจุต ุนูู zzz ู ุจ ุงูุชุงูู ุงู ูุฑูุงุจูู ุงููู ุจูู ูุจุต ุนูู ุงู zzz ูููุชู ูุชุจูู ุจ ุงููููุฉ ุงููู ู ุงู zzz ุงููุฏ 

// ูุจุงููุซู ูู ูุนุงูุง ูุฑูุงุจูู ุงูุณ ุจูุจุต ุนูู ุฑูุฑูุณ ูุงูุฑูุฑูุณ ุฏู ููู ูุฑูุงุจูู ููู ูุงููู ุชุงูุจ 5 ูุซูุง 
// ููู ุงูุง ุนูุฏู ูุฑูุงุจูู y ุจูุจุต ุนูู ุงูุฑูุฑูุณ ุงููู ุจูุจุต ุนููู ุงู ูุฑูุงุจูู ุงูุณ 
// ู ูู ุบูุฑุช ุงููููุฉ ุจุชุงุนุช ุงู ูุฑูุงุจูู ุงููู ููุฌูุฏู ู ุงูุฑูุฑูุณ ุงููู ุจูุจุต ุนููู ุงู ุงูุณ ูุงู ูุงู
// ู ูู ุฌูุช ุงุฌูุจ ูููุฉ ุงู ูุฑูุงุจูู ุฏู ูู ุงู ุงูุณ ุงู ูู ุงู ูุงู ููุงููู ุจ ุงุฎุฑ ูููุฉ ูุญุทูุทู ุทุจุนุง ูุงููู ุจูุจุตูุง ุนูู ููุณ ุงูุฑูุฑูุณ ูุงููุฑูุงุจูู ุงููู ู ุงูุฑูุฑูุณ ุฏู ูููุชู ุงุชุบูุฑุช ู ุจุงูุชุงูู ููุง ุงุฌู ุงุฌูุจ ูููุชู ูู ุงู ุงูุณ ุงู ุงู ูุงู ุงูุงูููุง ูุชุบูุฑู 

  #test:IReturnedBasket={basket:[]}; // [Gold] ุทุงููุง ุนููุช ูููุณุช ููุจุงุณูุช ู ุงูุง ุฎููุชู ูุจุต ุน ุฑูุฑูุณ ุบูุฑ ุงููู ุจูุจุต ุนููู ุงู ุชูุณุช ู ุจูุฏู ุงู ุชูุณุช ููููุด ุงู ูุงุฒูู ูุงูู ู ุงูุงูู ููุง ููุช ุจุฎูููู ูุจุตูุง ุน ููุณ ุงูุฑูุฑูุณ ู ุจ ุงูุชุงูู ุงู ูุฑูุงุจูู ููุชุบูุฑ ุฌูู ุงูุฑูุฑูุณ ุฏู ุงูุฏุฑ ุงุญุณ ุจูู ุทุจุนุง ูุงูู ููุช ููุตู ูู ูุฑูุงุจูู ุฏู ุนู ุทุฑูู ููุณ ุงูุฑูุฑูุณ 
  _basket = new BehaviorSubject<IReturnedBasket>(this.#test);
  basket$ = this._basket.asObservable();
  constructor(private http: HttpClient) {
    // ูุชุณุชุฎุฏูุด ngOnInit ู ุงู ุณูุฑูุณ ูุงููุง ูุด ุจุชุณุชุฎุฏู ูุน ุงูุณูุฑูุณ
  }
  getBasketIdFromLocal() {
    //Get Basket Id From Local 
    const basketId = localStorage.getItem('basketId');
    if (basketId) {
      this.http.get<IReturnedBasket>(
       environment.baseUrl + "BasketRedis?basketId=" + basketId
      ).pipe(
        map(
          val => {
            val.basket.forEach(x => x.MainPhotoIndex = 0)
            return val
          }
        )
      ).subscribe(

        {
          next: (val) => {
            ;
          this._basket.next(val);  // ูุงุฒู ุงุนูููุง ุงูุจุณูุฑูุงุจูู ุจูู ุนูุดุงู ุงู allPrice ุงููู ู ุงู cart-items.ts ูุชุจุนุชููุง ุงุฎุฑ ุชุญุฏูุซ 
            // this.test.basket=val.basket; // ุญุทูุง  ููู ุนู ุทุฑูู ุงู ูููุณุช ุงูุถู ุนูุดุงู ูู ุญุงุฌุฉ ุนุงููุฉ ุณุจุณูุฑุงูุจ ุนูู ุงู ุงูุจุณูุฑูุงุจูู ุชุฑูุญููุง 

          },
          error: (error: IError) => {
            this.error = error.error.message;
          }
        }
      )
        ;
    }
  }
  convertReturnedBasketToAddBasket(returnedBasketItems:IReturnedBasketItem[]):IAddBasketItem[]
  {
    let addBasketItems:IAddBasketItem[]=returnedBasketItems.map(val=>{
        let addBasketItem:IAddBasketItem={id:val.id,quantity:val.quantity};
        return addBasketItem;
    })
    return addBasketItems;
  }
  removeItemFromBasket(itemId: number) {
    if (this._basket.value.basket.length == 1) {
      this._basket.next({ basket: [] });
      //      this.test.basket=[];

      const basketId = localStorage.getItem('basketId');
      this.http.delete(environment.baseUrl + "BasketRedis?basketId=" + basketId).subscribe(
        {
          error: (error: IError) => {
            this.error = error.error.message;
          }
        }
      );
      localStorage.removeItem('basketId');
      return;
    }
       let returnedBasketItems:IReturnedBasketItem[] = this._basket.value.basket.filter(Item => Item.id != itemId) // ุฏู ูู ุญุงูุฉ ุงู ุฑูููู 

    let addBasketItems=this.convertReturnedBasketToAddBasket(returnedBasketItems);

    let basket: IAddBasket = { basket: addBasketItems }

    const basketId = localStorage.getItem('basketId');
    let queryParams = new HttpParams();
    queryParams = queryParams.set('basketId', basketId!);

    ////////////
    this.http.post<IReturnedBasket>(

     environment.baseUrl + "BasketRedis", basket, { params: queryParams }
    ).pipe(
        map(
          val => {
            val.basket.forEach(x => x.MainPhotoIndex = 0)
            return val
          }
        )
      ).subscribe(
      {
        next: (val) => {
          ;
    this._basket.next(val);  // ูุงุฒู ุงุนูููุง ุงูุจุณูุฑูุงุจูู ุจูู ุนูุดุงู ุงู allPrice ุงููู ู ุงู cart-items.ts ูุชุจุนุชููุง ุงุฎุฑ ุชุญุฏูุซ 
            // this.test.basket=val.basket; // ุญุทูุง  ููู ุนู ุทุฑูู ุงู ูููุณุช ุงูุถู ุนูุดุงู ูู ุญุงุฌุฉ ุนุงููุฉ ุณุจุณูุฑุงูุจ ุนูู ุงู ุงูุจุณูุฑูุงุจูู ุชุฑูุญููุง 
            
        },
        error: (error: IError) => {
            this.error = error.error.message;
        }
      }

    );
  }
  changeItemQuantity(itemId: number, quantity: number) {
    // ุงุฌูุจ ูู ุงูุนูุงุตุฑ ูู ุงู ุงูุจุณูุฑูุงุจูู ูุจุนุฏูู ุงุบูุฑ ู ุงูููุงูุชุชู ุจุชุงุน ุงูุนูุตุฑ ูุจุนุฏูู ุงุถููู ู ุงูุจุงู
    let items = this._basket.value.basket;
    let index = items.findIndex(i => i.id == itemId);
    items[index].quantity = quantity;

    const basketId = localStorage.getItem('basketId'); //sure that exist in local 

    let addBasketItems=this.convertReturnedBasketToAddBasket(items);



    let queryParams = new HttpParams();
    queryParams = queryParams.set('basketId', basketId!);

    let AddBasket: IAddBasket = { basket: addBasketItems }

    this.http.post<IReturnedBasket>(

     environment.baseUrl + "BasketRedis", AddBasket, { params: queryParams }
    ).pipe(
        map(
          val => {
            val.basket.forEach(x => x.MainPhotoIndex = 0)
            return val
          }
        )
      ).subscribe(
      {
        next: (val) => {
            this._basket.next(val);  // ูุงุฒู ุงุนูููุง ุงูุจุณูุฑูุงุจูู ุจูู ุนูุดุงู ุงู allPrice ุงููู ู ุงู cart-items.ts ูุชุจุนุชููุง ุงุฎุฑ ุชุญุฏูุซ 
            // this.test.basket=val.basket; // ุญุทูุง  ููู ุนู ุทุฑูู ุงู ูููุณุช ุงูุถู ุนูุดุงู ูู ุญุงุฌุฉ ุนุงููุฉ ุณุจุณูุฑุงูุจ ุนูู ุงู ุงูุจุณูุฑูุงุจูู ุชุฑูุญููุง 
        },
        error: (error: IError) => {
            this.error = error.error.message;
        }
      }

    );

  }
  addItemToBasket(itemId:number, quantity: number) {
    let addBasketItem:IAddBasketItem={id:itemId,quantity:quantity};
    if (this._basket.value.basket.length == 0) {
      //Empty Basket That Mean In My Logic That Dont Have Any BasketId In Local Or Redis
      const basketId = Guid.create().toString();; //Make It Guid Later
      localStorage.setItem('basketId', basketId);
      let queryParams = new HttpParams();
      queryParams = queryParams.set('basketId', basketId);

      let addBasketItems:IAddBasketItem[]=[addBasketItem]

      let addBasket:IAddBasket={basket:addBasketItems};
      this.http.post<IReturnedBasket>(

       environment.baseUrl + "BasketRedis", addBasket, { params: queryParams }
      ).pipe(
        map(
          val => {
            val.basket.forEach(x => x.MainPhotoIndex = 0)
            return val
          }
        )
      ).subscribe(
        {
          next: (val) => {
 this._basket.next(val);  // ูุงุฒู ุงุนูููุง ุงูุจุณูุฑูุงุจูู ุจูู ุนูุดุงู ุงู allPrice ุงููู ู ุงู cart-items.ts ูุชุจุนุชููุง ุงุฎุฑ ุชุญุฏูุซ 
            // this.test.basket=val.basket; // ุญุทูุง  ููู ุนู ุทุฑูู ุงู ูููุณุช ุงูุถู ุนูุดุงู ูู ุญุงุฌุฉ ุนุงููุฉ ุณุจุณูุฑุงูุจ ุนูู ุงู ุงูุจุณูุฑูุงุจูู ุชุฑูุญููุง 
          },
          error: (error: IError) => {
            this.error = error.error.message;
          }
        }

      );

    } else {
      //Have Basket
      // convert returnedBasket To Add Basket
      let listReturnedBasket=this._basket.value.basket;
      let listAddBasket=this.convertReturnedBasketToAddBasket(listReturnedBasket);
      
      
      const basketId = localStorage.getItem('basketId'); //sure that exist in local 


      // ูู ุงู ุจุงุณูุช ุงูุชู ุงููู ูุถููู ููุฌูุฏ ู ุงู ุจุงุณููุช ุงูุชููุฒ ูุจูู ูุงุฎุฏ ุงููุงููุช ุจุชุงุนุช ุงูุจุงุณูุช ุงูุชู ุงููู ูุถููู ูุงุฒูุฏูุง ุนูู ุงูุจุงุณููุช ุงูุชู ุงููู ููุฌูุฏ ู ุงู ุจุงุณููุช ุงูุชููุฒ

      let index = listAddBasket.findIndex(item => item.id == itemId);
      if (index == -1) {
      listAddBasket.push(addBasketItem);
      } else {

        // listAddBasket[index].quantity += quantity;
        listAddBasket[index].quantity = quantity; // ูุฎูููุง ุจุชุณุงูู ุงู ูููุชุชู ุงูุถู ุนูุดุงู ูู ุถุบุท ุงูุชุฑ ูู ูุฑุฉ ุจ ุงูุบูุท ูุฏู ุงูุถู 

      }

      let queryParams = new HttpParams();
      queryParams = queryParams.set('basketId', basketId!);
let addBasket:IAddBasket={basket:listAddBasket};
      this.http.post<IReturnedBasket>(

       environment.baseUrl + "BasketRedis", addBasket, { params: queryParams }
      ).pipe(
        map(
          val => {
            val.basket.forEach(x => x.MainPhotoIndex = 0)
            return val
          }
        )
      ).subscribe(
        {
          next: (val) => {
 this._basket.next(val);  // ูุงุฒู ุงุนูููุง ุงูุจุณูุฑูุงุจูู ุจูู ุนูุดุงู ุงู allPrice ุงููู ู ุงู cart-items.ts ูุชุจุนุชููุง ุงุฎุฑ ุชุญุฏูุซ 
            // this.test.basket=val.basket; // ุญุทูุง  ููู ุนู ุทุฑูู ุงู ูููุณุช ุงูุถู ุนูุดุงู ูู ุญุงุฌุฉ ุนุงููุฉ ุณุจุณูุฑุงูุจ ุนูู ุงู ุงูุจุณูุฑูุงุจูู ุชุฑูุญููุง 
          },
          error: (err: IError) => {
            this.error = err.error.message;
          }
        }

      );

    }
  }



}
